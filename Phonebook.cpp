#include<iostream> //REG#2019504
#include<string>// Syed Nazim Shah
#include<fstream> // Coded and Compiled in Dev C++
using namespace std; //*********PLEASE refer to Line 285 for initial info of the program!!*******************

class linkedlist { //implemeting a class of linked lists to make array of it later in hashtable class with its own functions
  struct node { //creating a node to store Contact data
    string name; ///////////////in the file "-" is stored instead of spaces in name string, for easier string readability
    string primaryphoneno;
    string secondaryphoneno;
    string address;
    int key; // its the key generated by hashfunction. the key is also stored in the file. Its the location of a Contact on array
    bool fromfile; // this variable is used to store the information of whether the contact came from file or user addded it while running
    node *next; // pointer to next node
  };
  node *headptr; // head pointer of each linkedlists
  public:
    linkedlist() { // constructor setting head pointer value to Null
      headptr = NULL;
    }
  void addcontact(int tempkey, string tempname, string temppriphoneno, string tempsecphoneno, string tempaddress, bool file) { // function to add Contact to the Linkedlists
    node *newptr = new node, *tempptr = headptr;
    newptr -> key = tempkey; //copying all information in a node
    newptr -> address = tempaddress;
    newptr -> name = tempname;
    newptr -> primaryphoneno = temppriphoneno;
    newptr -> secondaryphoneno = tempsecphoneno;
    newptr -> fromfile = file;
    newptr -> next = NULL;
    if (headptr == NULL) { // placing the pointer on head node if head is empty
      headptr = newptr;
      return;
    }
    while (tempptr -> next != NULL) // if not empty then finding an empty node by iterating
      tempptr = tempptr -> next;
    tempptr -> next = newptr; //placing the new pointer on the empty node at the end of the list
  }
  void displayallcontactsoflinkedlist() { //function to display all contacts present in the chain of nodes
    node *tempptr = headptr;
    while (tempptr != NULL) { //using a while loop to print all contacts
      cout << "\nName: " << tempptr -> name << "\nKey: " << tempptr -> key << "\nPrimary Phone No: " << tempptr -> primaryphoneno << "\nSecondary Phone No: " << tempptr -> secondaryphoneno << "\nAddress: " << tempptr -> address << endl;
      tempptr = tempptr -> next;// jumping to next node
    }
  }
  void findcontact(string tempname) {// finding a contact by using name in a list
    node *tempptr = headptr;
    int counter = 0; // counting the contacts of same name in a list since this program uses length of name string as key  
    bool found = 0;// check variable to see if contact has been found or not
    while (tempptr != NULL) {//using a while loop to iterate through all contacts
      if (tempptr -> name == tempname) {//matching names here
        found = 1; //check variable true
        counter++;// counter iterated
        cout << "\n***** Matched Contact " << counter << " *****\n"; // displaying all information
        cout << "\nName: " << tempptr -> name << "\nKey: " << tempptr -> key << "\nPrimary Phone No: " << tempptr -> primaryphoneno << "\nSecondary Phone No: " << tempptr -> secondaryphoneno << "\nAddress: " << tempptr -> address << endl;
      }
      tempptr = tempptr -> next;// iterating to next node in this while loop
    }

    if (found == 0) // using the check flag to display appropriate messege
      cout << "\nContact not found in the list";
  }
  bool checkforexistingcontact(string priphone, string secphone) {// function to check for existing contact incase user to enter same info for different contact
    node *tempptr = headptr;
    while (tempptr != NULL) { //checking through all phonenumbers. also crosschecking to make sure they can't interchange primary and secondary phone number. and displaying if a match is found
      if (tempptr -> primaryphoneno == priphone || tempptr -> secondaryphoneno == secphone || tempptr -> primaryphoneno == secphone || tempptr -> secondaryphoneno == priphone) {
        cout << "\nContact with the Entered Information already exists!!\nIt will not be saved!\n\n";
		cout << "\nName: " << tempptr -> name << "\nKey: " << tempptr -> key << "\nPrimary Phone No: " << tempptr -> primaryphoneno << "\nSecondary Phone No: " << tempptr -> secondaryphoneno << "\nAddress: " << tempptr -> address << endl;
        return 1; //also returning a value to make sure callee of this function also terminates if a match is found here
      }
      tempptr = tempptr -> next;
    }
    return 0;// if a match not found then letting the callee know that its not found by returning false
  }
  bool deletecontact(string tempname) { // function to delete contact from the progrm memory and from file
    node *tempptr = headptr, *previousptr; 
    int found = 0; // counter for found contacts
    string phonenumber; // will use this variable incase of multiple contacts to specify a contact using phonenumber

    while (tempptr != NULL) {
      if (tempptr -> name == tempname) { // displaying all found contacts
        found++; // counter to count all matched contacts and also acts in condition statements below
        cout << "\n***** Matched Contact " << found << " *****\n";
        cout << "\nName: " << tempptr -> name << "\nKey: " << tempptr -> key << "\nPrimary Phone No: " << tempptr -> primaryphoneno << "\nSecondary Phone No: " << tempptr -> secondaryphoneno << "\nAddress: " << tempptr -> address << endl;
      }
      previousptr = tempptr; // storing address of current location
      tempptr = tempptr -> next; //jumping to next location 
    }

    if (found == 0) { // if no contact is found
      cout << "\nContact to delete not found in the list!!\n\n";
      return 0;
    } else if (found == 1) // if only one contact is found the phone number is auto set to that contact istead of asking user to enter it like below
      previousptr -> primaryphoneno = phonenumber;
    else {
      cout << "\nEnter Primary Number of Contact to delete it: "; //asking user to enter a phone no to specify a contact
      cin >> phonenumber;
    }

    node *ptrcurrent = headptr, *ptrprevious;
    while (ptrcurrent != NULL && (ptrcurrent -> name != tempname || ptrcurrent -> primaryphoneno != phonenumber)) { // jumping nodes until details have been matched
      ptrprevious = ptrcurrent;
      ptrcurrent = ptrcurrent -> next;
    }

    if (ptrcurrent == headptr) // if contact is in head pointer then its deleted
      headptr = headptr -> next;
    else
      ptrprevious -> next = ptrcurrent -> next; // replacing the addresses removing the ptrcurrent's address
    bool temp=ptrcurrent -> fromfile; // saving info of whether the contact was in file or not, from ptrcurrent
	delete ptrcurrent;// ofcourse deleting it
    cout << "\nContact Deleted from Memory!!!"; // notifying user
    return temp;// return the info to callee
  }
  void writeentirechaintofile(ofstream & filetobewritten) { //this function write the chain of nodes to the file when the file file is truncated in order to delete a contact 
    node *tempptr = headptr;// first all data of file is loaded into program memory then a contact is deleted from memory the file is opened in trucated mode then all data from memory is written back to file with the exception of deleted contact
    while (tempptr != NULL) { // writing all data to file in this loop
      for(int i=0;i<tempptr->name.length(); i++){if(tempptr->name[i]==' ') tempptr->name[i]='-';} //name converted from spaced to unspaced string
	  
	  filetobewritten << endl << tempptr -> key << "\t" << tempptr -> name << "\t" << tempptr -> primaryphoneno << "\t" << tempptr -> secondaryphoneno << "\t" << tempptr -> address;
      
	  for(int i=0;i<tempptr->name.length(); i++){ if(tempptr->name[i]=='-') tempptr->name[i]=' ';}//name converted from unspaced to spaced string
	  tempptr = tempptr -> next;
    }
  }~linkedlist() { // delete function 
    node *ptrprevious;
    while (headptr != NULL) {
      ptrprevious = headptr;
      headptr = headptr -> next;
      delete ptrprevious;
    }
  }
};

class hashtable { // this class implements an array of Linked Lists along with all "hashtable" functions to make a Class of hashTable
  
    linkedlist array[10]; // implementing an array of size 10
    public:
    hashtable() { // the constructor here is capable of loading all saved contacts from file into memory. So when you save a contact in file, it will automatically be loaded next time you open the program 
      int key; 
      string name, priphoneno, secphoneno, address;
      ifstream filetoberead; // opening file 
      filetoberead.open("phonebook.txt"); 
      while (!filetoberead.eof()) {
      	
        filetoberead >> key >> name >> priphoneno >> secphoneno >> address; // taking data from file into variables 
        for(int i=0;i<name.length(); i++){ if(name[i]=='-') name[i]=' ';}// name converted from unspaced to spaced string
		array[key].addcontact(key, name, priphoneno, secphoneno, address, 1);// adding the contact from variables to array
      }// notice how the last value given to function is 1. its because to differentiate b/w "present in file and memory(1)" and "present in memory only (0)".
      filetoberead.close();
    }
  int hashfunction(string name) { // the hashfunction takes the name of a contact and generates a key  
    int sum=0;
	for(int i=0;i<name.length();i++){
		if(i<name.length()/2)sum=sum+int(name[i]); //adding all the ascii values until half the string
		else {
		if(i%2==0)sum=sum+int(name[i]); // adding on even index
		else sum=sum-int(name[i]); // subtracting on odd index
	}
	return sum;
  }
}
   int mappingfunction(int key){
   	return key%10;
   }
  void insertdata() { // a hash class function to add contacts into memory and file(optional)
    char choice;
    bool check = 0;
    string name, priphoneno, secphoneno, address;
    cout << "\nEnter name: ";
    cin.ignore();
    getline(cin, name);
    cout << "\nEnter Primary phone no: ";
    getline(cin, priphoneno);
    cout << "\nEnter Secondary phone no: ";
    getline(cin, secphoneno);
    cout << "\nEnter address: ";
    getline(cin, address);
    for (int i = 0; i < 10; i++) {
      if (array[i].checkforexistingcontact(priphoneno, secphoneno) == true) // function to check if the contact details entered already exist or not. If present it will tell the user and return without saving the contact info
        return;
    }
	cout << "\nDo you want to save the Contact info in the file (Y/N): "; // asking user if they want to save the contact in the file 
    cin >> choice;
    if (cin.fail()) { // check to minimize program failure
      cout << "\nEnter a Valid Response!\n";
      cin.clear();
      cin.ignore(5, '\n');
    }
    else if (choice == 'Y' || choice == 'y') { // saving in the file and memory
      int key = mappingfunction(hashfunction(name)); // generating a key
      array[key].addcontact(key, name, priphoneno, secphoneno, address, 1); // using the key to store contact
      for(int i=0;i<name.length(); i++){ if(name[i]==' ') name[i]='-';} // name converted to unspaced string
	  ofstream filetobewritten;
      filetobewritten.open("phonebook.txt", ios::app);
      filetobewritten << endl << key << "\t" << name << "\t" << priphoneno << "\t" << secphoneno << "\t" << address; // putting contact in the file
      cout << "\nContact has been saved to the file and to Memory!!\n";
      filetobewritten.close();
      return;
    } else {// or saving in the memory only
      int key = mappingfunction(hashfunction(name)); // generating a key
      array[key].addcontact(key, name, priphoneno, secphoneno, address, 0); //putting the contact in the memory with flag value to 0
      cout << "\nContact Saved to Memory Only!\n";
      return;
    }
  }
  void deletedata() { // deleting a contact in this function. this function also deletes from file 
    char choice;
    string name;
    cout << "\nEnter Name of contact to delete: ";
    cin.ignore();
    getline(cin, name); // getting the name of contact to be deleted
    int key = mappingfunction(hashfunction(name));// using hashfunction to generate key
    if (array[key].deletecontact(name) == true) { // taking the flag value from the called function to know whether the contact was in the file or not.
      cout << "\nDo you want to delete the Contact info from the file (Y/N): "; // if it was in the file user will pe prompted to delete it from file as well
      cin >> choice;
      if (cin.fail()) { // check to minimize program failure
      cout << "\nEnter a Valid Response!\n";
      cin.clear();
      cin.ignore(5, '\n');
    }
      else if (choice == 'Y' || choice == 'y') {
        ofstream filetobewritten;
        filetobewritten.open("phonebook.txt", ios::trunc); // opening the file in trunccated mode
        for (int i = 0; i < 10; i++) {
          array[i].writeentirechaintofile(filetobewritten);// using a for loop and writing all data from memory to file except for the deleted contact
        }
        cout << "\nContact has been Deleted from File!! \n\n";// prompting user
        filetobewritten.close();// rewritten file closed and hence contact deleted from file
      }
    }
  }
  void searchdata() { // function to search for details of a specific contact
    string name;
    cout << "\nEnter name of contact to find: "; //taking name of the contact to find
    cin.ignore();
    getline(cin, name);
    int index = mappingfunction(hashfunction(name));// using has function to generate a key
    array[index].findcontact(name);// using that key to find the contact in the list of nodes
    cout << endl;
  }
  void displayallcontacts() {// a function to display all contacts in the hash table 
    for (int i = 0; i < 10; i++) {
      array[i].displayallcontactsoflinkedlist(); // using the for loop to display all array indexes and calling display list function to display all contacts in nodes of each array index 
    }
  }

};
void mainprogram() {// main function thats does all the necessary function calling and console screen managment
  hashtable phonebook;// making an instance of hashtable class
  while (true) {// using the while loop to iterate the program 
    system("CLS");
    int choice = 0;
    cout << "\n1.Add a Contact\n2.View a Contact Information\n3.View all Contacts\n4.Delete a Contact\n5.Exit\n\nSelect a Choice: ";
    cin >> choice;
    if (cin.fail()) { // check to minimize program failure
      cout << "\nEnter a Valid Response!\n";
      cin.clear();
      cin.ignore(5, '\n');
    } else {
      system("CLS");//clearing screen
      switch (choice) { //using switch to perform user choice based tasks
      case 1:
        phonebook.insertdata();
        break;
      case 2:
        phonebook.searchdata();
        break;
      case 3:
        phonebook.displayallcontacts();
        break;
      case 4:
        phonebook.deletedata();
        break;
      case 5:
        return;
      default:
        cout << "\nPlease Select a Valid option!!!";
      }
    }
    cout << "\n\n";
    system("pause");
  }
}
int main() {//Instructions on the main screen. PLEASE DO READ THEM
  cout << "*****Welcome to Phonebook Program*****\n\n->This Program is can of Store Contacts in its own variables and well as it can store the Contacts Data in a file.\n->You are given an option to store a Contact in the file each time you add a new contact.\n->If you dont store a Contact in a file it will not be accessible after you close the program.\n->If you store a contact in the file, you wont have to add it next time as it will be automatically loaded from file.\n->A Contact once added cannot be Added again(Although two different contacts with same name can be stored)\n\n********A dash '-' is stored in the file instead of spaces in contact Names, for easier string readability*********\n\n";
  system("pause");
  ifstream checkfile;// checking if the file is present or not 
  checkfile.open("phonebook.txt");
  if (!checkfile.is_open()) {
    cout << "\n******ERROR!!!******\n\nFile not found! Make sure the file is Present in the same folder as this Program!\n\nExiting!\n\n"; // displaying error if no file found along with instructions
    return 0;
  } else {
    checkfile.close(); // closing the check file
    mainprogram(); // calling the Main Program
  }
  return 0;//REG#2019504 
}//Syed Nazim Shah
